[{"/Users/ivankashtanov/Desktop/ak-bars-test/src/components/App/App.tsx":"1","/Users/ivankashtanov/Desktop/ak-bars-test/src/components/PokeList/PokeList.tsx":"2","/Users/ivankashtanov/Desktop/ak-bars-test/src/reportWebVitals.ts":"3","/Users/ivankashtanov/Desktop/ak-bars-test/src/index.tsx":"4","/Users/ivankashtanov/Desktop/ak-bars-test/src/redux/store.ts":"5","/Users/ivankashtanov/Desktop/ak-bars-test/src/redux/reducer.ts":"6","/Users/ivankashtanov/Desktop/ak-bars-test/src/redux/actions.ts":"7","/Users/ivankashtanov/Desktop/ak-bars-test/src/redux/actionTypes.ts":"8","/Users/ivankashtanov/Desktop/ak-bars-test/src/components/PokeList/PokemonCard.tsx":"9","/Users/ivankashtanov/Desktop/ak-bars-test/src/components/PokeList/PokemonPage.tsx":"10","/Users/ivankashtanov/Desktop/ak-bars-test/src/components/PokeList/AbilityPage.tsx":"11","/Users/ivankashtanov/Desktop/ak-bars-test/src/types.ts":"12"},{"size":634,"mtime":1611683891016,"results":"13","hashOfConfig":"14"},{"size":1617,"mtime":1611686383958,"results":"15","hashOfConfig":"14"},{"size":425,"mtime":1611584660998,"results":"16","hashOfConfig":"14"},{"size":641,"mtime":1611585705708,"results":"17","hashOfConfig":"14"},{"size":670,"mtime":1611686757736,"results":"18","hashOfConfig":"14"},{"size":1024,"mtime":1611669284381,"results":"19","hashOfConfig":"14"},{"size":1402,"mtime":1611680918056,"results":"20","hashOfConfig":"14"},{"size":808,"mtime":1611669223089,"results":"21","hashOfConfig":"14"},{"size":869,"mtime":1611686885908,"results":"22","hashOfConfig":"14"},{"size":2837,"mtime":1611687307974,"results":"23","hashOfConfig":"14"},{"size":1867,"mtime":1611687328845,"results":"24","hashOfConfig":"14"},{"size":476,"mtime":1611687282822,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"qhcphw",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ivankashtanov/Desktop/ak-bars-test/src/components/App/App.tsx",[],"/Users/ivankashtanov/Desktop/ak-bars-test/src/components/PokeList/PokeList.tsx",[],["55","56"],"/Users/ivankashtanov/Desktop/ak-bars-test/src/reportWebVitals.ts",[],"/Users/ivankashtanov/Desktop/ak-bars-test/src/index.tsx",[],"/Users/ivankashtanov/Desktop/ak-bars-test/src/redux/store.ts",["57","58"],"import { applyMiddleware, combineReducers, createStore } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { reducer } from \"./reducer\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nlet PreloadedState = JSON.parse(localStorage.getItem(\"redux\") || \"{}\");\n\nexport const store = createStore(\n  reducer,\n  // PreloadedState,                    //causes unsolvable for me Error\n  composeWithDevTools(applyMiddleware(thunkMiddleware))\n);\n\nexport type AppState = ReturnType<typeof reducer>;\nexport type AppDispatch = typeof store.dispatch;\n\nstore.subscribe(() => {\n  window.localStorage.setItem(\"redux\", JSON.stringify(store.getState()));\n});\n","/Users/ivankashtanov/Desktop/ak-bars-test/src/redux/reducer.ts",["59"],"/Users/ivankashtanov/Desktop/ak-bars-test/src/redux/actions.ts",[],"/Users/ivankashtanov/Desktop/ak-bars-test/src/redux/actionTypes.ts",[],"/Users/ivankashtanov/Desktop/ak-bars-test/src/components/PokeList/PokemonCard.tsx",["60"],"import { FC, ReactElement, useEffect, useState } from \"react\";\n\ntype PropsType = {\n  pokeName: string;\n};\n\nexport const PokemonCard: FC<PropsType> = (props): ReactElement => {\n  const [pokeId, setPokeId] = useState<number>();\n\n  useEffect(() => {\n    let mounted = true;\n    async function getCurrentImage() {\n      const response = await fetch(\n        `https://pokeapi.co/api/v2/pokemon/${props.pokeName}`\n      );\n      const result = await response.json();\n      setPokeId(result.id);\n    }\n    if (mounted) {\n      getCurrentImage();\n    }\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  return (\n    <>\n      <div className=\"imgCardContainer\">\n        <h3>{props.pokeName}</h3>\n        <img\n          width=\"300\"\n          src={`https://pokeres.bastionbot.org/images/pokemon/${pokeId}.png`}\n          alt=\"/\"\n        />\n      </div>\n    </>\n  );\n};\n","/Users/ivankashtanov/Desktop/ak-bars-test/src/components/PokeList/PokemonPage.tsx",["61"],"import { ReactElement, useEffect, FC } from \"react\";\nimport { useParams, useHistory, Link } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppState } from \"../../redux/store\";\nimport { StateType } from \"../../redux/reducer\";\nimport { getPokemon } from \"../../redux/actions\";\nimport { Button, Spin } from \"antd\";\n\ntype PropsType = {\n  children?: never;\n};\n\nexport const PokemonPage: FC<PropsType> = (props): ReactElement => {\n  type ParamsType = {\n    name: string;\n  };\n  const history = useHistory();\n  const { name } = useParams<ParamsType>();\n  const dispatch = useDispatch();\n  const { currentPokemon, loading } = useSelector<AppState, StateType>(\n    (state) => state\n  );\n\n  useEffect(() => {\n    dispatch(getPokemon(name));\n  }, []);\n\n  return (\n    <>\n      <div className=\"pokemonPageContainer\">\n        {!loading ? (\n          <>\n            <div className=\"titleContainer\">\n              <h2>{name}</h2>\n            </div>\n            <div className=\"imgPageContainer\">\n              <img\n                width=\"200\"\n                alt=\"/\"\n                src={`https://pokeres.bastionbot.org/images/pokemon/${currentPokemon.id}.png`}\n              />\n            </div>\n            <div className=\"pageDataContainer\">\n              <div>\n                <ul>\n                  <h3>Type:</h3>\n                  {currentPokemon.types &&\n                    currentPokemon.types.map((slot: any) => (\n                      <li key={Math.random()}>{slot.type.name}</li>\n                    ))}\n                </ul>\n              </div>\n              <div>\n                <ul>\n                  <h3>Abilities:</h3>\n                  {currentPokemon.abilities &&\n                    currentPokemon.abilities.map((ability: any) => (\n                      <li key={Math.random()}>\n                        <Link to={`/${name}/ability/${ability.ability.name}`}>\n                          {ability.ability.name}\n                        </Link>\n                      </li>\n                    ))}\n                </ul>\n              </div>\n              <div>\n                <ul>\n                  <h3>Charachteristics:</h3>\n                  {currentPokemon.stats &&\n                    currentPokemon.stats.map((slot: any) => (\n                      <li key={Math.random()}>\n                        {slot.stat.name} : {slot.base_stat}\n                      </li>\n                    ))}\n                </ul>\n              </div>\n            </div>\n          </>\n        ) : (\n          <div className=\"spin\">\n            <Spin />\n          </div>\n        )}\n        <div className=\"buttonContainer\">\n          <Button\n            onClick={() => {\n              history.push(\"/\");\n            }}\n          >\n            Back\n          </Button>\n        </div>\n      </div>\n    </>\n  );\n};\n","/Users/ivankashtanov/Desktop/ak-bars-test/src/components/PokeList/AbilityPage.tsx",["62"],"import { Button } from \"antd\";\nimport { FC, ReactElement, useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { StateType } from \"../../redux/reducer\";\nimport { AppState } from \"../../redux/store\";\nimport { InfoAbilityType, InfoType, AbilitiyObjectType } from \"../../types\";\n\ntype PropsType = {\n  children?: never;\n};\n\nexport const AbilityPage: FC<PropsType> = (props): ReactElement => {\n  type ParamsType = {\n    abilityName: string;\n  };\n\n  const { abilityName } = useParams<ParamsType>();\n  const history = useHistory();\n\n  const { currentPokemon } = useSelector<AppState, StateType>((state) => state);\n\n  const [currentAbility, setCurrentAbility] = useState<InfoAbilityType>();\n\n  const [currentInfo, setCurrentInfo] = useState<InfoType>();\n\n  useEffect(() => {\n    async function getAbility() {\n      const currentUrl = currentPokemon.abilities.find(\n        (ability: AbilitiyObjectType) => {\n          return ability.ability.name === abilityName;\n        }\n      );\n      const response = await fetch(`${currentUrl.ability.url}`);\n      const result = await response.json();\n      setCurrentAbility(result);\n    }\n    getAbility();\n  }, []);\n\n  useEffect(() => {\n    if (currentAbility) {\n      const info = currentAbility.effect_entries.find(\n        (infoLang: InfoType) => infoLang.language.name === \"en\"\n      );\n      setCurrentInfo(info);\n    }\n  }, [currentAbility]);\n\n  return (\n    <>\n      <div className=\"abilityContainer\">\n        <h1>\n          <b>{abilityName}</b>\n        </h1>\n        <h3>\n          <b>Description:</b> {currentInfo && currentInfo.effect}\n        </h3>\n\n        <Button\n          onClick={() => {\n            history.push(`/${currentPokemon.name}`);\n          }}\n        >\n          Back\n        </Button>\n      </div>\n    </>\n  );\n};\n","/Users/ivankashtanov/Desktop/ak-bars-test/src/types.ts",[],{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":1,"column":27,"nodeType":"69","messageId":"70","endLine":1,"endColumn":42},{"ruleId":"67","severity":1,"message":"71","line":6,"column":5,"nodeType":"69","messageId":"70","endLine":6,"endColumn":19},{"ruleId":"67","severity":1,"message":"72","line":1,"column":10,"nodeType":"69","messageId":"70","endLine":1,"endColumn":16},{"ruleId":"73","severity":1,"message":"74","line":25,"column":6,"nodeType":"75","endLine":25,"endColumn":8,"suggestions":"76"},{"ruleId":"73","severity":1,"message":"77","line":26,"column":6,"nodeType":"75","endLine":26,"endColumn":8,"suggestions":"78"},{"ruleId":"73","severity":1,"message":"79","line":39,"column":6,"nodeType":"75","endLine":39,"endColumn":8,"suggestions":"80"},"no-native-reassign",["81"],"no-negated-in-lhs",["82"],"@typescript-eslint/no-unused-vars","'combineReducers' is defined but never used.","Identifier","unusedVar","'PreloadedState' is assigned a value but never used.","'Action' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.pokeName'. Either include it or remove the dependency array.","ArrayExpression",["83"],"React Hook useEffect has missing dependencies: 'dispatch' and 'name'. Either include them or remove the dependency array.",["84"],"React Hook useEffect has missing dependencies: 'abilityName' and 'currentPokemon.abilities'. Either include them or remove the dependency array.",["85"],"no-global-assign","no-unsafe-negation",{"desc":"86","fix":"87"},{"desc":"88","fix":"89"},{"desc":"90","fix":"91"},"Update the dependencies array to be: [props.pokeName]",{"range":"92","text":"93"},"Update the dependencies array to be: [dispatch, name]",{"range":"94","text":"95"},"Update the dependencies array to be: [abilityName, currentPokemon.abilities]",{"range":"96","text":"97"},[599,601],"[props.pokeName]",[779,781],"[dispatch, name]",[1236,1238],"[abilityName, currentPokemon.abilities]"]